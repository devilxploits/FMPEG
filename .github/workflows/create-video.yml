name: 🎬 Create Video

on:
  repository_dispatch:
    types: [create_video]

jobs:
  create-video:
    runs-on: ubuntu-latest

    container:
      image: docker.io/cashewin/video-tools:latest
      credentials:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      options: --user 0

    defaults:
      run:
        shell: bash

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Prepare assets from payload
        run: |
          set -euo pipefail
          mkdir -p assets output /tmp

          echo "================================================"
          echo "🎬 VIDEO CREATION STARTING (Docker Mode)"
          echo "================================================"

          echo '${{ toJson(github.event.client_payload.images) }}' > /tmp/images.json

          idx=0
          while IFS= read -r image_url; do
            if [ -n "$image_url" ] && [ "$image_url" != "null" ]; then
              outfile="assets/image_$(printf '%03d' "$idx").png"
              echo "📥 Downloading image $((idx + 1)): $image_url"
              curl -L --fail --retry 3 -o "$outfile" "$image_url"
              idx=$((idx + 1))
            fi
          done < <(jq -r '.[]?' /tmp/images.json)

          echo "📊 Total images: $idx"
          ls -lh assets/

          if [ -n "${{ github.event.client_payload.voiceover_url || '' }}" ]; then
            echo "🎤 Downloading voiceover..."
            curl -L -o assets/voiceover.mp3 "${{ github.event.client_payload.voiceover_url }}"
          fi

          if [ -n "${{ github.event.client_payload.background_music_url || '' }}" ]; then
            echo "🎵 Downloading background music..."
            curl -L -o assets/bgmusic.mp3 "${{ github.event.client_payload.background_music_url }}"
          fi

          if [ -n "${{ github.event.client_payload.subtitles || '' }}" ]; then
            echo '${{ github.event.client_payload.subtitles }}' > /tmp/subtitles.json
          fi

      - name: 🎞️ Create video with FFmpeg
        run: |
          set -euo pipefail
          mkdir -p fixed
          for img in assets/image_*.png; do
            ffmpeg -y -i "$img" -vf "scale=1080:1080:force_original_aspect_ratio=decrease,pad=1080:1080:(ow-iw)/2:(oh-ih)/2" "fixed/$(basename "$img")"
          done

          cd fixed
          IMG_COUNT=$(ls -1 image_*.png | wc -l)
          TOTAL_DURATION=$((IMG_COUNT * 5))
          echo "🕒 Total duration = $TOTAL_DURATION seconds"

          # Create concat text file for FFmpeg
          > ../output/input.txt
          for img in image_*.png; do
            echo "file '$PWD/$img'" >> ../output/input.txt
            echo "duration 5" >> ../output/input.txt
          done
          echo "file '$PWD/$(ls -1 image_*.png | tail -1)'" >> ../output/input.txt

          cd ../output
          echo "🎬 Creating video slideshow..."
          ffmpeg -y -f concat -safe 0 -i input.txt -vsync vfr -pix_fmt yuv420p temp.mp4

          # Generate subtitles file (if payload includes them)
          if [ -f /tmp/subtitles.json ]; then
            echo "📝 Generating subtitles..."
            > subs.srt
            i=1
            jq -r '.[]' /tmp/subtitles.json | while IFS= read -r line; do
              START=$(( (i - 1) * 5 ))
              END=$(( i * 5 ))
              printf "%d\n%02d:%02d:00,000 --> %02d:%02d:00,000\n%s\n\n" \
                "$i" $((START/60)) $((START%60)) $((END/60)) $((END%60)) "$line" >> subs.srt
              i=$((i + 1))
            done
            ffmpeg -y -i temp.mp4 -vf "subtitles=subs.srt:force_style='Fontsize=32,PrimaryColour=&HFFFFFF&,OutlineColour=&H000000&,BorderStyle=1,Outline=2,Shadow=1,Alignment=2'" -c:a copy temp_subs.mp4
            mv temp_subs.mp4 temp.mp4
          fi

          # Add voiceover
          if [ -f ../assets/voiceover.mp3 ]; then
            ffmpeg -y -i temp.mp4 -i ../assets/voiceover.mp3 -c:v copy -c:a aac -shortest temp_vo.mp4
            mv temp_vo.mp4 temp.mp4
          fi

          # Add background music
          if [ -f ../assets/bgmusic.mp3 ]; then
            ffmpeg -y -i temp.mp4 -i ../assets/bgmusic.mp3 \
              -filter_complex "[1:a]volume=0.4[a];[0:a][a]amix=inputs=2:duration=first" \
              -c:v copy -c:a aac output.mp4
          else
            mv temp.mp4 output.mp4
          fi

          echo "✅ Final video ready!"
          ls -lh

      - name: 📦 Upload artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: final_video
          path: output/output.mp4
          retention-days: 7
